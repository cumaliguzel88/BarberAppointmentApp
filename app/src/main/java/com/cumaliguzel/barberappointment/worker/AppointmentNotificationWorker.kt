package com.cumaliguzel.barberappointment.worker

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.media.RingtoneManager
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.work.CoroutineWorker
import androidx.work.ForegroundInfo
import androidx.work.Worker
import androidx.work.WorkerParameters
import com.cumaliguzel.barberappointment.MainActivity
import com.cumaliguzel.barberappointment.R
import com.cumaliguzel.barberappointment.data.AppDatabase
import com.cumaliguzel.barberappointment.viewmodel.AppointmentViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.time.LocalDate

class AppointmentNotificationWorker(
    private val context: Context,
    workerParams: WorkerParameters
) : CoroutineWorker(context, workerParams) {

    companion object {
        private const val CHANNEL_ID = "appointment_notifications"
        private const val FOREGROUND_NOTIFICATION_ID = 1
        private const val DEBUG_TAG = "NotificationWorker"
    }

    override suspend fun doWork(): Result = withContext(Dispatchers.IO) {
        try {
            // √ñncelikle foreground service olarak ba≈ülat (Android 9+ i√ßin √∂nemli)
            setForeground(createForegroundInfo())
            
            // Bildirim i√ßeriƒüi
            val appointmentId = inputData.getInt("appointmentId", -1)
            val customerName = inputData.getString("customerName") ?: "M√º≈üteri"
            val operation = inputData.getString("operation") ?: "ƒ∞≈ülem"
            val time = inputData.getString("time") ?: "??:??"
            val date = inputData.getString("date") ?: LocalDate.now().toString()
            
            Log.d(DEBUG_TAG, "Bildirim hazƒ±rlanƒ±yor: $customerName - $time, ID: $appointmentId")
            
            // Son bir kez daha kontrol et - randevu hala tamamlanmamƒ±≈ü mƒ±?
            val appointmentDao = AppDatabase.getDatabase(applicationContext).appointmentDao()
            if (appointmentDao == null) {
                Log.e(DEBUG_TAG, "‚ùå AppointmentDao olu≈üturulamadƒ±")
                return@withContext Result.failure()
            }
            
            val appointment = appointmentDao.getAppointmentById(appointmentId)
            
            if (appointment == null) {
                Log.d(DEBUG_TAG, "Randevu bulunamadƒ±: $appointmentId")
                return@withContext Result.failure()
            }
            
            if (appointment.status == "Completed") {
                Log.d(DEBUG_TAG, "Randevu zaten tamamlanmƒ±≈ü: $appointmentId")
                return@withContext Result.success()
            }
            
            // Bildirim g√∂ster
            showNotification(appointmentId, customerName, operation, time, date)
            
            Result.success()
        } catch (e: Exception) {
            Log.e(DEBUG_TAG, "Bildirim i≈ülemi sƒ±rasƒ±nda hata olu≈ütu", e)
            Result.failure()
        }
    }
    
    private fun createForegroundInfo(): ForegroundInfo {
        // Bildirim kanalƒ±nƒ± olu≈ütur
        createNotificationChannel()
        
        val notification = NotificationCompat.Builder(applicationContext, CHANNEL_ID)
            .setContentTitle("Randevu Hatƒ±rlatƒ±cƒ±")
            .setContentText("Yakla≈üan randevular i√ßin hazƒ±rlanƒ±yor...")
            .setSmallIcon(R.drawable.ic_notification)
            .setPriority(NotificationCompat.PRIORITY_MIN)
            .setOngoing(true)
            .build()
            
        return ForegroundInfo(FOREGROUND_NOTIFICATION_ID, notification)
    }

    private fun createNotificationChannel() {
        // Android 8.0+ i√ßin kanal olu≈ütur
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "Randevu Bildirimleri"
            val descriptionText = "Yakla≈üan randevular i√ßin bildirimler"
            val importance = NotificationManager.IMPORTANCE_HIGH
            
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
                enableLights(true)
                lightColor = Color.RED
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 500, 200, 500)
                setShowBadge(true) // Uygulama simgesinde bildirim rozeti g√∂ster
            }
            
            // Kanalƒ± sisteme kaydet
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
            
            Log.d(DEBUG_TAG, "Bildirim kanalƒ± olu≈üturuldu: $CHANNEL_ID")
        }
    }

    private fun showNotification(appointmentId: Int, customerName: String, operation: String, time: String, date: String) {
        // Bildirim kanalƒ±nƒ± olu≈ütur
        createNotificationChannel()
        
        // Intent olu≈ütur
        val intent = Intent(applicationContext, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("appointmentId", appointmentId)
        }
        
        // FLAG_IMMUTABLE Android 12+ i√ßin gerekli, eski s√ºr√ºmlerde FLAG_UPDATE_CURRENT yeterli
        val pendingIntentFlag = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        } else {
            PendingIntent.FLAG_UPDATE_CURRENT
        }
        
        val pendingIntent = PendingIntent.getActivity(
            applicationContext, 
            appointmentId, 
            intent,
            pendingIntentFlag
        )
        
        // Varsayƒ±lan bildirim sesi
        val defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
        
        // Bildirim i√ßeriƒüi
        val title = "Randevu Hatƒ±rlatmasƒ±"
        val content = "$customerName i√ßin $time randevusu 5 dakika i√ßinde ba≈ülayacak - ƒ∞≈ülem: $operation"
        
        val notification = NotificationCompat.Builder(applicationContext, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle(title)
            .setContentText(content)
            .setStyle(NotificationCompat.BigTextStyle().bigText(content))
            .setPriority(NotificationCompat.PRIORITY_MAX) // Maksimum √∂ncelik
            .setCategory(NotificationCompat.CATEGORY_ALARM) // Alarm kategorisi en y√ºksek √∂nceliƒüi saƒülar
            .setVibrate(longArrayOf(0, 500, 200, 500))
            .setSound(defaultSoundUri)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC) // Kilit ekranƒ±nda tam g√∂r√ºn√ºr
            .build()
        
        try {
            // NotificationManagerCompat.from(applicationContext).notify i√ßin gereken izin kontrol√º
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                // Android 13+ i√ßin POST_NOTIFICATIONS izni kontrol et
                val context = applicationContext
                if (context.checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS) != 
                        PackageManager.PERMISSION_GRANTED) {
                    Log.e(DEBUG_TAG, "POST_NOTIFICATIONS izni eksik")
                    return
                }
            }
            
            NotificationManagerCompat.from(applicationContext).notify(appointmentId, notification)
            Log.d(DEBUG_TAG, "üì± Bildirim g√∂sterildi: $customerName [ID:$appointmentId] [Tarih:$date] [Saat:$time]")
        } catch (e: SecurityException) {
            Log.e(DEBUG_TAG, "Bildirim g√∂sterilirken izin hatasƒ± olu≈ütu", e)
        }
    }
} 