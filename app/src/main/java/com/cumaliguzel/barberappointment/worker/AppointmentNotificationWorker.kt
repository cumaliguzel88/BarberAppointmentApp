package com.cumaliguzel.barberappointment.worker

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.graphics.Color
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.cumaliguzel.barberappointment.R
import com.cumaliguzel.barberappointment.data.AppDatabase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.time.LocalDate

class AppointmentNotificationWorker(
    context: Context,
    workerParams: WorkerParameters
) : CoroutineWorker(context, workerParams) {

    companion object {
        private const val CHANNEL_ID = "appointment_notifications"
        private const val NOTIFICATION_ID = 1
        private const val TAG = "AppointmentNotification"
    }

    override suspend fun doWork(): Result {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üîÑ Bildirim worker'ƒ± ba≈ülatƒ±ldƒ±")

                // Bildirim verilerini al
                val appointmentId = inputData.getInt("appointmentId", -1)
                val customerName = inputData.getString("customerName") ?: "M√º≈üteri"
                val operation = inputData.getString("operation") ?: "ƒ∞≈ülem"
                val time = inputData.getString("time") ?: "??:??"
                val date = inputData.getString("date") ?: LocalDate.now().toString()

                Log.d(TAG, """
                    üìã Randevu bilgileri alƒ±ndƒ±:
                    ID: $appointmentId
                    M√º≈üteri: $customerName
                    ƒ∞≈ülem: $operation
                    Tarih: $date
                    Saat: $time
                """.trimIndent())

                // Randevu hala ge√ßerli mi kontrol et
                val appointmentDao = AppDatabase.getDatabase(applicationContext).appointmentDao()
                val appointment = appointmentDao.getAppointmentById(appointmentId)

                if (appointment == null) {
                    Log.e(TAG, "‚ùå Randevu bulunamadƒ± - ID: $appointmentId")
                    return@withContext Result.failure()
                }

                if (appointment.status == "Completed") {
                    Log.d(TAG, "‚ÑπÔ∏è Randevu zaten tamamlanmƒ±≈ü - ID: $appointmentId")
                    return@withContext Result.success()
                }

                // Bildirim g√∂ster
                showNotification(appointmentId, customerName, operation, time)
                Log.d(TAG, "‚úÖ Bildirim ba≈üarƒ±yla g√∂sterildi - ID: $appointmentId")

                Result.success()
            } catch (e: Exception) {
                Log.e(TAG, "üí• Bildirim g√∂sterilirken hata olu≈ütu", e)
                Result.failure()
            }
        }
    }

    private fun showNotification(appointmentId: Int, customerName: String, operation: String, time: String) {
        try {
            val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

            // Bildirim kanalƒ± olu≈ütur (Android 8.0 ve √ºzeri i√ßin)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                val channel = NotificationChannel(
                    CHANNEL_ID,
                    "Randevu Bildirimleri",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "Yakla≈üan randevular i√ßin bildirimler"
                    enableLights(true)
                    lightColor = Color.RED
                    enableVibration(true)
                    setShowBadge(true)
                    setBypassDnd(true)
                    lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC
                }
                notificationManager.createNotificationChannel(channel)
                Log.d(TAG, "üì¢ Bildirim kanalƒ± g√ºncellendi")
            }

            // Bildirim olu≈ütur
            val notification = NotificationCompat.Builder(applicationContext, CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_notification)
                .setContentTitle("‚è∞ Yakla≈üan Randevu")
                .setContentText("$customerName - $time")
                .setStyle(NotificationCompat.BigTextStyle()
                    .bigText("$customerName i√ßin $operation randevunuz yakla≈üƒ±yor.\nSaat: $time"))
                .setPriority(NotificationCompat.PRIORITY_MAX)
                .setCategory(NotificationCompat.CATEGORY_ALARM)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setAutoCancel(true)
                .setDefaults(NotificationCompat.DEFAULT_ALL)
                .build()

            // Bildirimi g√∂ster
            notificationManager.notify(appointmentId, notification)
            Log.d(TAG, """
                üì± Bildirim g√∂sterildi:
                ID: $appointmentId
                M√º≈üteri: $customerName
                Saat: $time
                ƒ∞≈ülem: $operation
            """.trimIndent())

        } catch (e: Exception) {
            Log.e(TAG, "üí• Bildirim olu≈üturulurken hata olu≈ütu", e)
            throw e
        }
    }
} 